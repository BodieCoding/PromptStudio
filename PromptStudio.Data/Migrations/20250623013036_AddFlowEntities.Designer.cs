// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PromptStudio.Data;

#nullable disable

namespace PromptStudio.Data.Migrations
{
    [DbContext(typeof(PromptStudioDbContext))]
    [Migration("20250623013036_AddFlowEntities")]
    partial class AddFlowEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PromptStudio.Core.Domain.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A sample collection to get you started",
                            Name = "Sample Collection",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 1001,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Advanced prompt templates designed for AI agents to automate complex multi-step workflows, code analysis, and problem-solving tasks",
                            Name = "AI Agent Workflows",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.FlowExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long>("ExecutionTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InputVariables")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FlowId");

                    b.HasIndex("Status");

                    b.ToTable("FlowExecutions");
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.PromptExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AiProvider")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10,4)");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PromptTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("ResolvedPrompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseTimeMs")
                        .HasColumnType("int");

                    b.Property<int?>("TokensUsed")
                        .HasColumnType("int");

                    b.Property<int?>("VariableCollectionId")
                        .HasColumnType("int");

                    b.Property<string>("VariableValues")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExecutedAt");

                    b.HasIndex("PromptTemplateId");

                    b.HasIndex("VariableCollectionId");

                    b.ToTable("PromptExecutions");
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.PromptFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FlowData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Tags")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name");

                    b.HasIndex("UserId");

                    b.ToTable("PromptFlows");
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.PromptTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId", "Name");

                    b.ToTable("PromptTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CollectionId = 1,
                            Content = "Please review the following {{language}} code and provide feedback:\n\n```{{language}}\n{{code}}\n```\n\nFocus on:\n- Code quality\n- Performance\n- Security\n- Best practices",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Review code for best practices and improvements",
                            Name = "Code Review",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 1001,
                            CollectionId = 1001,
                            Content = "# Advanced Code Analysis & Refactoring\r\n\r\n## Context\r\nYou are analyzing {{code_type}} code from {{project_name}} for {{analysis_purpose}}.\r\n\r\n## Code to Analyze\r\n```{{language}}\r\n{{source_code}}\r\n```\r\n\r\n## Analysis Requirements\r\n- **Primary Focus**: {{primary_focus}}\r\n- **Secondary Concerns**: {{secondary_concerns}}\r\n- **Performance Requirements**: {{performance_requirements}}\r\n- **Code Standards**: {{coding_standards}}\r\n- **Target Audience**: {{target_audience}}\r\n\r\n## Specific Analysis Tasks\r\n\r\n### 1. Code Quality Assessment\r\nEvaluate the code for:\r\n- Readability and maintainability\r\n- Performance bottlenecks\r\n- Security vulnerabilities\r\n- Design pattern adherence\r\n- Error handling robustness\r\n\r\n### 2. Architecture Review\r\nAnalyze:\r\n- Component separation and cohesion\r\n- Dependency management\r\n- Scalability considerations\r\n- Testing coverage gaps\r\n- Documentation completeness\r\n\r\n### 3. Refactoring Recommendations\r\nProvide:\r\n- Specific refactoring steps with before/after examples\r\n- Estimated impact on {{business_metrics}}\r\n- Risk assessment for each change\r\n- Implementation priority ranking\r\n- Resource requirements\r\n\r\n### 4. Alternative Approaches\r\nSuggest:\r\n- Modern framework alternatives for {{legacy_components}}\r\n- Performance optimization techniques\r\n- Best practices for {{specific_domain}}\r\n- Integration improvements with {{external_systems}}\r\n\r\n## Deliverables\r\n1. **Executive Summary**: {{executive_focus}} appropriate insights\r\n2. **Technical Details**: Implementation-ready recommendations\r\n3. **Action Plan**: Prioritized steps with {{timeline_constraints}}\r\n4. **Risk Mitigation**: Strategies for {{deployment_environment}}\r\n\r\n## Success Metrics\r\nMeasure improvements in:\r\n{{success_metrics}}\r\n\r\n## Constraints\r\n- Budget: {{budget_constraints}}\r\n- Timeline: {{timeline_constraints}}\r\n- Team Expertise: {{team_capabilities}}\r\n- Business Requirements: {{business_constraints}}",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Comprehensive code analysis and refactoring recommendations with business context",
                            Name = "Advanced Code Analysis & Refactoring",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 1002,
                            CollectionId = 1001,
                            Content = "# AI-Powered Debugging & Problem Solving Framework\r\n\r\n## Issue Context\r\n- **System**: {{system_name}} ({{system_type}})\r\n- **Environment**: {{environment_type}}\r\n- **Issue Description**: {{issue_description}}\r\n- **Severity Level**: {{severity_level}}\r\n- **Business Impact**: {{business_impact}}\r\n\r\n## Problem Analysis\r\n\r\n### 1. Initial Assessment\r\n**Symptoms Observed:**\r\n{{symptoms_observed}}\r\n\r\n**Error Messages/Logs:**\r\n```\r\n{{error_logs}}\r\n```\r\n\r\n**Reproduction Steps:**\r\n{{reproduction_steps}}\r\n\r\n**Environmental Factors:**\r\n- Operating System: {{operating_system}}\r\n- Runtime Version: {{runtime_version}}\r\n- Dependencies: {{dependencies_list}}\r\n- Configuration: {{configuration_details}}\r\n\r\n### 2. Systematic Investigation\r\n\r\n#### Data Collection\r\nGather information about:\r\n- {{data_sources}}\r\n- Performance metrics during {{timeframe_analysis}}\r\n- User behavior patterns: {{user_patterns}}\r\n- System load: {{system_load_info}}\r\n\r\n#### Root Cause Analysis\r\nApply debugging methodology:\r\n1. **Hypothesis Formation**: Based on {{initial_hypothesis}}\r\n2. **Evidence Gathering**: From {{evidence_sources}}\r\n3. **Pattern Recognition**: Looking for {{pattern_indicators}}\r\n4. **Correlation Analysis**: Between {{correlation_factors}}\r\n\r\n### 3. Solution Development\r\n\r\n#### Immediate Actions\r\n**Quick Fixes** (Timeline: {{immediate_timeline}}):\r\n{{immediate_actions}}\r\n\r\n**Mitigation Strategies**:\r\n{{mitigation_strategies}}\r\n\r\n#### Long-term Solutions\r\n**Architectural Improvements**:\r\n{{architectural_improvements}}\r\n\r\n**Process Enhancements**:\r\n{{process_enhancements}}\r\n\r\n**Monitoring & Alerting**:\r\n{{monitoring_setup}}\r\n\r\n### 4. Implementation Plan\r\n\r\n#### Phase 1: Stabilization\r\n- Priority: {{phase1_priority}}\r\n- Resources: {{phase1_resources}}\r\n- Timeline: {{phase1_timeline}}\r\n- Success Criteria: {{phase1_success}}\r\n\r\n#### Phase 2: Optimization\r\n- Scope: {{phase2_scope}}\r\n- Dependencies: {{phase2_dependencies}}\r\n- Risk Assessment: {{phase2_risks}}\r\n\r\n#### Phase 3: Prevention\r\n- Automation: {{automation_requirements}}\r\n- Documentation: {{documentation_needs}}\r\n- Training: {{training_requirements}}\r\n\r\n### 5. Validation & Testing\r\n\r\n**Test Strategy**:\r\n{{test_strategy}}\r\n\r\n**Validation Criteria**:\r\n{{validation_criteria}}\r\n\r\n**Rollback Plan**:\r\n{{rollback_plan}}\r\n\r\n## Monitoring & Follow-up\r\n- **Key Metrics**: {{success_metrics}}\r\n- **Alert Thresholds**: {{alert_thresholds}}\r\n- **Review Schedule**: {{review_schedule}}\r\n- **Stakeholder Communication**: {{communication_plan}}\r\n\r\n## Learning & Documentation\r\n**Post-Mortem Analysis**:\r\n{{postmortem_requirements}}\r\n\r\n**Knowledge Base Updates**:\r\n{{knowledge_base_updates}}\r\n\r\n**Team Training Needs**:\r\n{{training_needs}}",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Systematic debugging and problem-solving framework for complex technical issues",
                            Name = "AI-Powered Debugging & Problem Solving",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 1003,
                            CollectionId = 1001,
                            Content = "# Multi-Modal Creative Content Generator\r\n\r\n## Campaign Overview\r\n- **Brand**: {{brand_name}}\r\n- **Campaign Name**: {{campaign_name}}\r\n- **Campaign Objective**: {{campaign_objective}}\r\n- **Target Audience**: {{target_audience}}\r\n- **Campaign Duration**: {{campaign_duration}}\r\n- **Budget**: {{campaign_budget}}\r\n\r\n## Brand Guidelines\r\n**Brand Voice & Tone:**\r\n{{brand_voice}}\r\n\r\n**Visual Identity:**\r\n{{visual_identity}}\r\n\r\n**Key Messages:**\r\n{{key_messages}}\r\n\r\n**Brand Values:**\r\n{{brand_values}}\r\n\r\n## Content Strategy\r\n\r\n### 1. Platform-Specific Content\r\n\r\n#### Social Media Platforms\r\n**Instagram**:\r\n- Content Type: {{instagram_content_type}}\r\n- Post Frequency: {{instagram_frequency}}\r\n- Hashtag Strategy: {{instagram_hashtags}}\r\n- Visual Style: {{instagram_visual_style}}\r\n\r\n**LinkedIn**:\r\n- Content Focus: {{linkedin_focus}}\r\n- Tone: {{linkedin_tone}}\r\n- Format Preferences: {{linkedin_formats}}\r\n\r\n**Twitter/X**:\r\n- Content Style: {{twitter_style}}\r\n- Engagement Strategy: {{twitter_engagement}}\r\n- Trending Topics: {{twitter_trends}}\r\n\r\n**TikTok**:\r\n- Content Themes: {{tiktok_themes}}\r\n- Music/Audio: {{tiktok_audio}}\r\n- Trends Integration: {{tiktok_trends}}\r\n\r\n**YouTube**:\r\n- Video Types: {{youtube_types}}\r\n- SEO Strategy: {{youtube_seo}}\r\n- Thumbnail Strategy: {{youtube_thumbnails}}\r\n\r\n#### Traditional Media\r\n**Email Marketing**:\r\n- Subject Line Strategy: {{email_subjects}}\r\n- Content Structure: {{email_structure}}\r\n- CTA Strategy: {{email_cta}}\r\n\r\n**Blog Content**:\r\n- Topics: {{blog_topics}}\r\n- SEO Keywords: {{seo_keywords}}\r\n- Content Calendar: {{content_calendar}}\r\n\r\n**Print Materials**:\r\n- Format Requirements: {{print_formats}}\r\n- Distribution Channels: {{print_distribution}}\r\n\r\n### 2. Content Creation Framework\r\n\r\n#### Text Content\r\n**Headlines & Copy**:\r\nGenerate compelling headlines for {{headline_context}} that:\r\n- Capture attention within {{attention_timeframe}}\r\n- Convey {{key_benefits}}\r\n- Include power words: {{power_words}}\r\n- Optimize for {{optimization_goals}}\r\n\r\n**Body Content**:\r\nCreate engaging content that:\r\n- Addresses {{audience_pain_points}}\r\n- Provides value through {{value_proposition}}\r\n- Includes {{social_proof_elements}}\r\n- Drives action toward {{desired_actions}}\r\n\r\n#### Visual Content\r\n**Image Concepts**:\r\n- Style: {{image_style}}\r\n- Color Palette: {{color_palette}}\r\n- Composition: {{composition_style}}\r\n- Subject Matter: {{image_subjects}}\r\n\r\n**Video Concepts**:\r\n- Format: {{video_format}}\r\n- Duration: {{video_duration}}\r\n- Narrative Structure: {{video_narrative}}\r\n- Visual Effects: {{video_effects}}\r\n\r\n#### Audio Content\r\n**Podcast/Audio**:\r\n- Tone: {{audio_tone}}\r\n- Background Music: {{background_music}}\r\n- Voice Style: {{voice_style}}\r\n- Sound Effects: {{sound_effects}}\r\n\r\n### 3. Personalization & Targeting\r\n\r\n#### Audience Segmentation\r\n**Primary Segments**:\r\n{{audience_segments}}\r\n\r\n**Personalization Variables**:\r\n{{personalization_vars}}\r\n\r\n**Behavioral Triggers**:\r\n{{behavioral_triggers}}\r\n\r\n#### Dynamic Content\r\n**A/B Testing Framework**:\r\nTest variations of:\r\n- {{ab_test_elements}}\r\n- Metrics to track: {{ab_test_metrics}}\r\n- Statistical significance: {{significance_threshold}}\r\n\r\n### 4. Content Calendar & Scheduling\r\n\r\n#### Content Planning\r\n**Weekly Themes**:\r\n{{weekly_themes}}\r\n\r\n**Seasonal Considerations**:\r\n{{seasonal_factors}}\r\n\r\n**Event-Based Content**:\r\n{{event_content}}\r\n\r\n#### Publishing Schedule\r\n**Optimal Timing**:\r\n{{posting_schedule}}\r\n\r\n**Frequency by Platform**:\r\n{{platform_frequency}}\r\n\r\n**Cross-Platform Coordination**:\r\n{{cross_platform_strategy}}\r\n\r\n### 5. Performance Optimization\r\n\r\n#### Success Metrics\r\n**Engagement Metrics**:\r\n{{engagement_metrics}}\r\n\r\n**Conversion Metrics**:\r\n{{conversion_metrics}}\r\n\r\n**Brand Awareness Metrics**:\r\n{{awareness_metrics}}\r\n\r\n#### Optimization Strategy\r\n**Content Performance Analysis**:\r\n{{performance_analysis}}\r\n\r\n**Iterative Improvements**:\r\n{{improvement_strategy}}\r\n\r\n**Trend Integration**:\r\n{{trend_integration}}\r\n\r\n### 6. Compliance & Guidelines\r\n\r\n#### Legal Considerations\r\n**Copyright Requirements**:\r\n{{copyright_requirements}}\r\n\r\n**Disclosure Requirements**:\r\n{{disclosure_requirements}}\r\n\r\n**Platform Guidelines**:\r\n{{platform_guidelines}}\r\n\r\n#### Quality Assurance\r\n**Review Process**:\r\n{{review_process}}\r\n\r\n**Approval Workflow**:\r\n{{approval_workflow}}\r\n\r\n**Brand Consistency Check**:\r\n{{consistency_check}}\r\n\r\n## Deliverables\r\n1. **Content Assets**: {{deliverable_assets}}\r\n2. **Style Guide**: {{style_guide_elements}}\r\n3. **Content Calendar**: {{calendar_timeframe}}\r\n4. **Performance Dashboard**: {{dashboard_metrics}}\r\n5. **Optimization Recommendations**: {{optimization_recommendations}}",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Comprehensive creative content generation framework for multi-platform campaigns",
                            Name = "Multi-Modal Creative Content Generator",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 1004,
                            CollectionId = 1001,
                            Content = "# AI Agent Workflow Orchestration Framework\r\n\r\n## Workflow Definition\r\n- **Workflow Name**: {{workflow_name}}\r\n- **Business Objective**: {{business_objective}}\r\n- **Success Criteria**: {{success_criteria}}\r\n- **SLA Requirements**: {{sla_requirements}}\r\n- **Compliance Requirements**: {{compliance_requirements}}\r\n\r\n## Agent Architecture\r\n\r\n### 1. Agent Configuration\r\n**Primary Agents:**\r\n{{primary_agents}}\r\n\r\n**Supporting Agents:**\r\n{{supporting_agents}}\r\n\r\n**Agent Capabilities:**\r\n{{agent_capabilities}}\r\n\r\n**Resource Requirements:**\r\n{{resource_requirements}}\r\n\r\n### 2. Communication Protocols\r\n**Inter-Agent Communication:**\r\n- Protocol: {{communication_protocol}}\r\n- Message Format: {{message_format}}\r\n- Authentication: {{auth_mechanism}}\r\n- Rate Limiting: {{rate_limits}}\r\n\r\n**External Integrations:**\r\n{{external_integrations}}\r\n\r\n## Workflow Design\r\n\r\n### 3. Process Flow Definition\r\n\r\n#### Step 1: Initialization\r\n**Trigger Conditions:**\r\n{{trigger_conditions}}\r\n\r\n**Input Validation:**\r\n{{input_validation}}\r\n\r\n**Resource Allocation:**\r\n{{resource_allocation}}\r\n\r\n**Logging Setup:**\r\n{{logging_setup}}\r\n\r\n#### Step 2: Task Distribution\r\n**Task Assignment Strategy:**\r\n{{task_assignment}}\r\n\r\n**Load Balancing:**\r\n{{load_balancing}}\r\n\r\n**Priority Handling:**\r\n{{priority_handling}}\r\n\r\n**Queue Management:**\r\n{{queue_management}}\r\n\r\n#### Step 3: Execution Monitoring\r\n**Real-time Monitoring:**\r\n{{monitoring_setup}}\r\n\r\n**Performance Metrics:**\r\n{{performance_metrics}}\r\n\r\n**Health Checks:**\r\n{{health_checks}}\r\n\r\n**Alert Conditions:**\r\n{{alert_conditions}}\r\n\r\n#### Step 4: Error Handling\r\n**Error Classification:**\r\n{{error_classification}}\r\n\r\n**Recovery Strategies:**\r\n{{recovery_strategies}}\r\n\r\n**Escalation Procedures:**\r\n{{escalation_procedures}}\r\n\r\n**Fallback Mechanisms:**\r\n{{fallback_mechanisms}}\r\n\r\n#### Step 5: Completion & Cleanup\r\n**Success Validation:**\r\n{{success_validation}}\r\n\r\n**Data Persistence:**\r\n{{data_persistence}}\r\n\r\n**Resource Cleanup:**\r\n{{resource_cleanup}}\r\n\r\n**Notification System:**\r\n{{notification_system}}\r\n\r\n### 4. Advanced Features\r\n\r\n#### Dynamic Scaling\r\n**Auto-scaling Triggers:**\r\n{{scaling_triggers}}\r\n\r\n**Resource Provisioning:**\r\n{{resource_provisioning}}\r\n\r\n**Performance Optimization:**\r\n{{performance_optimization}}\r\n\r\n**Cost Management:**\r\n{{cost_management}}\r\n\r\n#### Workflow Branching\r\n**Conditional Logic:**\r\n{{conditional_logic}}\r\n\r\n**Parallel Processing:**\r\n{{parallel_processing}}\r\n\r\n**Synchronization Points:**\r\n{{sync_points}}\r\n\r\n**Merge Strategies:**\r\n{{merge_strategies}}\r\n\r\n#### State Management\r\n**State Persistence:**\r\n{{state_persistence}}\r\n\r\n**Checkpoint Strategy:**\r\n{{checkpoint_strategy}}\r\n\r\n**Recovery Points:**\r\n{{recovery_points}}\r\n\r\n**State Validation:**\r\n{{state_validation}}\r\n\r\n### 5. Quality Assurance\r\n\r\n#### Testing Framework\r\n**Unit Testing:**\r\n{{unit_testing}}\r\n\r\n**Integration Testing:**\r\n{{integration_testing}}\r\n\r\n**Performance Testing:**\r\n{{performance_testing}}\r\n\r\n**Chaos Engineering:**\r\n{{chaos_engineering}}\r\n\r\n#### Validation Pipeline\r\n**Input Validation:**\r\n{{input_validation_rules}}\r\n\r\n**Output Verification:**\r\n{{output_verification}}\r\n\r\n**Business Rule Validation:**\r\n{{business_rule_validation}}\r\n\r\n**Compliance Checking:**\r\n{{compliance_checking}}\r\n\r\n### 6. Security & Governance\r\n\r\n#### Security Framework\r\n**Authentication & Authorization:**\r\n{{auth_framework}}\r\n\r\n**Data Encryption:**\r\n{{encryption_standards}}\r\n\r\n**Audit Logging:**\r\n{{audit_logging}}\r\n\r\n**Access Control:**\r\n{{access_control}}\r\n\r\n#### Governance\r\n**Approval Workflows:**\r\n{{approval_workflows}}\r\n\r\n**Change Management:**\r\n{{change_management}}\r\n\r\n**Version Control:**\r\n{{version_control}}\r\n\r\n**Documentation Standards:**\r\n{{documentation_standards}}\r\n\r\n### 7. Monitoring & Analytics\r\n\r\n#### Performance Dashboard\r\n**Key Metrics:**\r\n{{dashboard_metrics}}\r\n\r\n**Real-time Indicators:**\r\n{{realtime_indicators}}\r\n\r\n**Historical Analysis:**\r\n{{historical_analysis}}\r\n\r\n**Predictive Analytics:**\r\n{{predictive_analytics}}\r\n\r\n#### Alerting System\r\n**Alert Types:**\r\n{{alert_types}}\r\n\r\n**Escalation Matrix:**\r\n{{escalation_matrix}}\r\n\r\n**Response Procedures:**\r\n{{response_procedures}}\r\n\r\n**Communication Channels:**\r\n{{communication_channels}}\r\n\r\n### 8. Optimization & Tuning\r\n\r\n#### Performance Optimization\r\n**Bottleneck Identification:**\r\n{{bottleneck_identification}}\r\n\r\n**Resource Optimization:**\r\n{{resource_optimization}}\r\n\r\n**Algorithm Tuning:**\r\n{{algorithm_tuning}}\r\n\r\n**Caching Strategy:**\r\n{{caching_strategy}}\r\n\r\n#### Continuous Improvement\r\n**Feedback Loops:**\r\n{{feedback_loops}}\r\n\r\n**Learning Mechanisms:**\r\n{{learning_mechanisms}}\r\n\r\n**Adaptation Strategies:**\r\n{{adaptation_strategies}}\r\n\r\n**Version Updates:**\r\n{{version_updates}}\r\n\r\n### 9. Deployment & Operations\r\n\r\n#### Deployment Strategy\r\n**Environment Management:**\r\n{{environment_management}}\r\n\r\n**Blue-Green Deployment:**\r\n{{bluegreen_strategy}}\r\n\r\n**Rollback Procedures:**\r\n{{rollback_procedures}}\r\n\r\n**Migration Planning:**\r\n{{migration_planning}}\r\n\r\n#### Operational Procedures\r\n**Daily Operations:**\r\n{{daily_operations}}\r\n\r\n**Maintenance Windows:**\r\n{{maintenance_windows}}\r\n\r\n**Backup & Recovery:**\r\n{{backup_recovery}}\r\n\r\n**Disaster Recovery:**\r\n{{disaster_recovery}}\r\n\r\n### 10. Documentation & Training\r\n\r\n#### Documentation Requirements\r\n**Technical Documentation:**\r\n{{technical_docs}}\r\n\r\n**User Guides:**\r\n{{user_guides}}\r\n\r\n**Operational Runbooks:**\r\n{{operational_runbooks}}\r\n\r\n**API Documentation:**\r\n{{api_documentation}}\r\n\r\n#### Training Program\r\n**Operator Training:**\r\n{{operator_training}}\r\n\r\n**Developer Training:**\r\n{{developer_training}}\r\n\r\n**Business User Training:**\r\n{{business_training}}\r\n\r\n**Certification Requirements:**\r\n{{certification_requirements}}\r\n\r\n## Implementation Timeline\r\n**Phase 1**: {{phase1_scope}} ({{phase1_timeline}})\r\n**Phase 2**: {{phase2_scope}} ({{phase2_timeline}})\r\n**Phase 3**: {{phase3_scope}} ({{phase3_timeline}})\r\n\r\n## Success Metrics & KPIs\r\n**Business Metrics:**\r\n{{business_metrics}}\r\n\r\n**Technical Metrics:**\r\n{{technical_metrics}}\r\n\r\n**User Experience Metrics:**\r\n{{ux_metrics}}\r\n\r\n**Cost Efficiency Metrics:**\r\n{{cost_metrics}}",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Advanced framework for orchestrating complex AI agent workflows with error handling, monitoring, and optimization",
                            Name = "AI Agent Workflow Orchestration",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 1005,
                            CollectionId = 1001,
                            Content = "# Intelligent Test Generation & QA Automation Framework\r\n\r\n## Project Context\r\n- **Application**: {{application_name}}\r\n- **Technology Stack**: {{technology_stack}}\r\n- **Testing Scope**: {{testing_scope}}\r\n- **Quality Standards**: {{quality_standards}}\r\n- **Regulatory Requirements**: {{regulatory_requirements}}\r\n\r\n## Testing Strategy\r\n\r\n### 1. Test Planning & Analysis\r\n\r\n#### Requirements Analysis\r\n**Functional Requirements:**\r\n{{functional_requirements}}\r\n\r\n**Non-Functional Requirements:**\r\n{{nonfunctional_requirements}}\r\n\r\n**Business Rules:**\r\n{{business_rules}}\r\n\r\n**User Stories/Use Cases:**\r\n{{user_stories}}\r\n\r\n#### Risk Assessment\r\n**High-Risk Areas:**\r\n{{high_risk_areas}}\r\n\r\n**Critical Paths:**\r\n{{critical_paths}}\r\n\r\n**Security Vulnerabilities:**\r\n{{security_risks}}\r\n\r\n**Performance Bottlenecks:**\r\n{{performance_risks}}\r\n\r\n### 2. Test Design Framework\r\n\r\n#### Test Categories\r\n**Unit Testing:**\r\n- Coverage Target: {{unit_coverage_target}}\r\n- Frameworks: {{unit_frameworks}}\r\n- Mock Strategy: {{mock_strategy}}\r\n- Test Data: {{unit_test_data}}\r\n\r\n**Integration Testing:**\r\n- Integration Points: {{integration_points}}\r\n- Test Environment: {{integration_environment}}\r\n- Data Dependencies: {{integration_dependencies}}\r\n- External Services: {{external_services}}\r\n\r\n**System Testing:**\r\n- Test Scenarios: {{system_scenarios}}\r\n- Environment Requirements: {{system_environment}}\r\n- Performance Criteria: {{performance_criteria}}\r\n- Security Testing: {{security_testing}}\r\n\r\n**User Acceptance Testing:**\r\n- Acceptance Criteria: {{acceptance_criteria}}\r\n- User Personas: {{user_personas}}\r\n- Business Scenarios: {{business_scenarios}}\r\n- Sign-off Requirements: {{signoff_requirements}}\r\n\r\n#### Test Data Management\r\n**Data Generation Strategy:**\r\n{{data_generation}}\r\n\r\n**Data Privacy Compliance:**\r\n{{data_privacy}}\r\n\r\n**Test Data Refresh:**\r\n{{data_refresh}}\r\n\r\n**Data Masking Requirements:**\r\n{{data_masking}}\r\n\r\n### 3. Automated Testing Implementation\r\n\r\n#### Test Automation Architecture\r\n**Framework Selection:**\r\n{{automation_framework}}\r\n\r\n**Tool Stack:**\r\n{{automation_tools}}\r\n\r\n**Infrastructure Requirements:**\r\n{{automation_infrastructure}}\r\n\r\n**Maintenance Strategy:**\r\n{{automation_maintenance}}\r\n\r\n#### Test Script Generation\r\n**Page Object Patterns:**\r\n{{page_objects}}\r\n\r\n**Test Case Patterns:**\r\n{{test_patterns}}\r\n\r\n**Assertion Strategies:**\r\n{{assertion_strategies}}\r\n\r\n**Error Handling:**\r\n{{error_handling}}\r\n\r\n#### API Testing Automation\r\n**Endpoint Coverage:**\r\n{{api_endpoints}}\r\n\r\n**Authentication Testing:**\r\n{{api_auth}}\r\n\r\n**Data Validation:**\r\n{{api_validation}}\r\n\r\n**Performance Testing:**\r\n{{api_performance}}\r\n\r\n### 4. Performance Testing Strategy\r\n\r\n#### Performance Requirements\r\n**Response Time Targets:**\r\n{{response_targets}}\r\n\r\n**Throughput Requirements:**\r\n{{throughput_requirements}}\r\n\r\n**Scalability Targets:**\r\n{{scalability_targets}}\r\n\r\n**Resource Utilization:**\r\n{{resource_utilization}}\r\n\r\n#### Load Testing Design\r\n**Test Scenarios:**\r\n{{load_scenarios}}\r\n\r\n**Load Patterns:**\r\n{{load_patterns}}\r\n\r\n**Ramp-up Strategy:**\r\n{{rampup_strategy}}\r\n\r\n**Break-point Testing:**\r\n{{breakpoint_testing}}\r\n\r\n#### Performance Monitoring\r\n**Monitoring Tools:**\r\n{{performance_tools}}\r\n\r\n**Key Metrics:**\r\n{{performance_metrics}}\r\n\r\n**Alert Thresholds:**\r\n{{performance_alerts}}\r\n\r\n**Reporting Strategy:**\r\n{{performance_reporting}}\r\n\r\n### 5. Security Testing Framework\r\n\r\n#### Security Test Categories\r\n**Authentication Testing:**\r\n{{auth_testing}}\r\n\r\n**Authorization Testing:**\r\n{{authz_testing}}\r\n\r\n**Input Validation:**\r\n{{input_validation}}\r\n\r\n**Session Management:**\r\n{{session_testing}}\r\n\r\n#### Vulnerability Assessment\r\n**OWASP Top 10:**\r\n{{owasp_testing}}\r\n\r\n**Penetration Testing:**\r\n{{pentest_scope}}\r\n\r\n**Code Security Review:**\r\n{{code_security}}\r\n\r\n**Infrastructure Security:**\r\n{{infra_security}}\r\n\r\n#### Compliance Testing\r\n**Regulatory Requirements:**\r\n{{compliance_requirements}}\r\n\r\n**Data Protection:**\r\n{{data_protection}}\r\n\r\n**Audit Requirements:**\r\n{{audit_requirements}}\r\n\r\n**Certification Needs:**\r\n{{certification_needs}}\r\n\r\n### 6. CI/CD Integration\r\n\r\n#### Pipeline Integration\r\n**Build Integration:**\r\n{{build_integration}}\r\n\r\n**Test Execution:**\r\n{{test_execution}}\r\n\r\n**Deployment Gates:**\r\n{{deployment_gates}}\r\n\r\n**Rollback Triggers:**\r\n{{rollback_triggers}}\r\n\r\n#### Quality Gates\r\n**Code Coverage Thresholds:**\r\n{{coverage_thresholds}}\r\n\r\n**Test Pass Rates:**\r\n{{pass_rates}}\r\n\r\n**Performance Benchmarks:**\r\n{{performance_benchmarks}}\r\n\r\n**Security Scan Results:**\r\n{{security_scans}}\r\n\r\n#### Reporting & Notifications\r\n**Test Reports:**\r\n{{test_reports}}\r\n\r\n**Failure Notifications:**\r\n{{failure_notifications}}\r\n\r\n**Quality Dashboards:**\r\n{{quality_dashboards}}\r\n\r\n**Stakeholder Communication:**\r\n{{stakeholder_communication}}\r\n\r\n### 7. Test Environment Management\r\n\r\n#### Environment Configuration\r\n**Environment Types:**\r\n{{environment_types}}\r\n\r\n**Configuration Management:**\r\n{{config_management}}\r\n\r\n**Environment Provisioning:**\r\n{{environment_provisioning}}\r\n\r\n**Data Seeding:**\r\n{{data_seeding}}\r\n\r\n#### Environment Monitoring\r\n**Health Checks:**\r\n{{environment_health}}\r\n\r\n**Performance Monitoring:**\r\n{{environment_performance}}\r\n\r\n**Resource Utilization:**\r\n{{resource_monitoring}}\r\n\r\n**Cost Optimization:**\r\n{{cost_optimization}}\r\n\r\n### 8. Defect Management\r\n\r\n#### Bug Tracking\r\n**Defect Classification:**\r\n{{defect_classification}}\r\n\r\n**Priority Matrix:**\r\n{{priority_matrix}}\r\n\r\n**Severity Levels:**\r\n{{severity_levels}}\r\n\r\n**Escalation Procedures:**\r\n{{escalation_procedures}}\r\n\r\n#### Root Cause Analysis\r\n**Analysis Framework:**\r\n{{rca_framework}}\r\n\r\n**Pattern Identification:**\r\n{{pattern_identification}}\r\n\r\n**Prevention Strategies:**\r\n{{prevention_strategies}}\r\n\r\n**Process Improvements:**\r\n{{process_improvements}}\r\n\r\n### 9. Quality Metrics & Reporting\r\n\r\n#### Test Metrics\r\n**Coverage Metrics:**\r\n{{coverage_metrics}}\r\n\r\n**Quality Metrics:**\r\n{{quality_metrics}}\r\n\r\n**Efficiency Metrics:**\r\n{{efficiency_metrics}}\r\n\r\n**Trend Analysis:**\r\n{{trend_analysis}}\r\n\r\n#### Business Metrics\r\n**Customer Impact:**\r\n{{customer_impact}}\r\n\r\n**Business Value:**\r\n{{business_value}}\r\n\r\n**Cost of Quality:**\r\n{{cost_quality}}\r\n\r\n**ROI Analysis:**\r\n{{roi_analysis}}\r\n\r\n#### Executive Reporting\r\n**Dashboard Design:**\r\n{{executive_dashboard}}\r\n\r\n**KPI Tracking:**\r\n{{kpi_tracking}}\r\n\r\n**Risk Assessment:**\r\n{{risk_reporting}}\r\n\r\n**Recommendation Engine:**\r\n{{recommendation_engine}}\r\n\r\n### 10. Continuous Improvement\r\n\r\n#### Test Optimization\r\n**Test Suite Optimization:**\r\n{{test_optimization}}\r\n\r\n**Execution Time Reduction:**\r\n{{execution_optimization}}\r\n\r\n**Maintenance Reduction:**\r\n{{maintenance_optimization}}\r\n\r\n**Reliability Improvement:**\r\n{{reliability_improvement}}\r\n\r\n#### Process Enhancement\r\n**Methodology Updates:**\r\n{{methodology_updates}}\r\n\r\n**Tool Evaluation:**\r\n{{tool_evaluation}}\r\n\r\n**Skill Development:**\r\n{{skill_development}}\r\n\r\n**Best Practice Adoption:**\r\n{{best_practices}}\r\n\r\n#### Innovation Integration\r\n**AI/ML Integration:**\r\n{{ai_integration}}\r\n\r\n**Predictive Analytics:**\r\n{{predictive_analytics}}\r\n\r\n**Intelligent Test Generation:**\r\n{{intelligent_generation}}\r\n\r\n**Autonomous Testing:**\r\n{{autonomous_testing}}\r\n\r\n## Implementation Roadmap\r\n**Phase 1**: Foundation Setup ({{phase1_timeline}})\r\n**Phase 2**: Automation Implementation ({{phase2_timeline}})\r\n**Phase 3**: Advanced Features ({{phase3_timeline}})\r\n**Phase 4**: Optimization & Innovation ({{phase4_timeline}})\r\n\r\n## Success Criteria & ROI\r\n**Quality Improvements:**\r\n{{quality_improvements}}\r\n\r\n**Cost Reductions:**\r\n{{cost_reductions}}\r\n\r\n**Time Savings:**\r\n{{time_savings}}\r\n\r\n**Risk Mitigation:**\r\n{{risk_mitigation}}",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Comprehensive testing strategy development with CI/CD integration and quality metrics",
                            Name = "Intelligent Test Generation & QA Automation",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.PromptVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PromptTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PromptTemplateId", "Name")
                        .IsUnique();

                    b.ToTable("PromptVariables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultValue = "javascript",
                            Description = "Programming language of the code",
                            Name = "language",
                            PromptTemplateId = 1,
                            Type = "Text"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultValue = "// Paste your code here",
                            Description = "The code to review",
                            Name = "code",
                            PromptTemplateId = 1,
                            Type = "LargeText"
                        });
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.VariableCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PromptTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VariableSets")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("PromptTemplateId");

                    b.ToTable("VariableCollections");
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.FlowExecution", b =>
                {
                    b.HasOne("PromptStudio.Core.Domain.PromptFlow", "Flow")
                        .WithMany()
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.PromptExecution", b =>
                {
                    b.HasOne("PromptStudio.Core.Domain.PromptTemplate", "PromptTemplate")
                        .WithMany("Executions")
                        .HasForeignKey("PromptTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromptStudio.Core.Domain.VariableCollection", null)
                        .WithMany("Executions")
                        .HasForeignKey("VariableCollectionId");

                    b.Navigation("PromptTemplate");
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.PromptTemplate", b =>
                {
                    b.HasOne("PromptStudio.Core.Domain.Collection", "Collection")
                        .WithMany("PromptTemplates")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.PromptVariable", b =>
                {
                    b.HasOne("PromptStudio.Core.Domain.PromptTemplate", "PromptTemplate")
                        .WithMany("Variables")
                        .HasForeignKey("PromptTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromptTemplate");
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.VariableCollection", b =>
                {
                    b.HasOne("PromptStudio.Core.Domain.PromptTemplate", "PromptTemplate")
                        .WithMany("VariableCollections")
                        .HasForeignKey("PromptTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromptTemplate");
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.Collection", b =>
                {
                    b.Navigation("PromptTemplates");
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.PromptTemplate", b =>
                {
                    b.Navigation("Executions");

                    b.Navigation("VariableCollections");

                    b.Navigation("Variables");
                });

            modelBuilder.Entity("PromptStudio.Core.Domain.VariableCollection", b =>
                {
                    b.Navigation("Executions");
                });
#pragma warning restore 612, 618
        }
    }
}
