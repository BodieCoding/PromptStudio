using System.ComponentModel.DataAnnotations;

namespace PromptStudio.Core.Domain;

/// <summary>
/// Represents a single execution instance of a prompt template with specific variable values.
/// PromptExecution provides comprehensive tracking of LLM interactions including request parameters,
/// responses, performance metrics, costs, and quality assessments for enterprise analytics and optimization.
/// </summary>
/// <remarks>
/// PromptExecution serves as the fundamental audit and analytics unit in LLMOps,
/// capturing every interaction with language models for compliance, optimization,
/// and quality management. Each execution record enables detailed performance analysis,
/// cost tracking, and continuous improvement of prompt engineering efforts.
/// </remarks>
public class PromptExecution : AuditableEntity
{
    /// <summary>
    /// Gets or sets the unique identifier of the prompt template used for this execution.
    /// Links this execution to the specific template version and configuration used.
    /// </summary>
    /// <value>The GUID of the PromptTemplate that was executed.</value>
    /// <remarks>
    /// Template linkage is critical for performance analysis, A/B testing,
    /// and understanding the impact of template changes on execution outcomes.
    /// </remarks>
    public Guid PromptTemplateId { get; set; }
    
    /// <summary>
    /// Gets or sets the final prompt text after all variable substitutions have been applied.
    /// Represents the exact text that was sent to the language model for processing.
    /// </summary>
    /// <value>
    /// The complete, resolved prompt text with all variables replaced by actual values.
    /// Required field as it represents the core input to the LLM execution.
    /// </value>
    /// <remarks>
    /// Storing the resolved prompt enables exact reproduction of executions,
    /// debugging of variable substitution issues, and compliance auditing
    /// of actual content sent to external AI providers.
    /// </remarks>
    [Required]
    public string ResolvedPrompt { get; set; } = string.Empty;
    
    /// <summary>
    /// Gets or sets the variable values used for template substitution in JSON format.
    /// Contains the key-value pairs that were used to resolve template variables.
    /// </summary>
    /// <value>
    /// A JSON string containing variable names and their corresponding values used in this execution.
    /// Null if the template contained no variables or if variable tracking is disabled.
    /// </value>
    /// <example>
    /// {"customer_name": "John Doe", "issue_type": "billing", "priority": "high", "language": "en"}
    /// </example>
    /// <remarks>
    /// Variable value tracking enables analysis of input patterns, performance correlation
    /// with specific inputs, and reproduction of execution scenarios for testing.
    /// </remarks>
    public string? VariableValues { get; set; }
    
    /// <summary>
    /// Gets or sets the AI provider used for this execution.
    /// Identifies the specific LLM service provider that processed the request.
    /// </summary>
    /// <value>
    /// The provider identifier (e.g., "openai", "anthropic", "azure-openai", "bedrock").
    /// Optional field with maximum length of 50 characters.
    /// </value>
    /// <example>
    /// Examples: "openai", "anthropic", "azure-openai", "bedrock", "huggingface", "cohere"
    /// </example>
    /// <remarks>
    /// Provider tracking enables cost analysis, performance comparison across providers,
    /// and strategic decisions about provider selection and optimization.
    /// </remarks>
    [StringLength(50)]
    public string? AiProvider { get; set; }
    
    /// <summary>
    /// Gets or sets the specific model used for this execution.
    /// Identifies the exact language model that generated the response.
    /// </summary>
    /// <value>
    /// The model identifier (e.g., "gpt-4", "gpt-3.5-turbo", "claude-3-opus").
    /// Optional field with maximum length of 50 characters.
    /// </value>
    /// <example>
    /// Examples: "gpt-4", "gpt-3.5-turbo", "claude-3-opus", "claude-3-sonnet", "llama-2-70b"
    /// </example>
    /// <remarks>
    /// Model tracking is essential for performance analysis, cost optimization,
    /// and understanding the capabilities and limitations of different models.
    /// </remarks>
    [StringLength(50)]
    public string? Model { get; set; }
    
    /// <summary>
    /// Gets or sets the response generated by the AI provider.
    /// Contains the complete output from the language model for this execution.
    /// </summary>
    /// <value>
    /// The full text response generated by the AI model. Can be null if execution failed
    /// or if response storage is disabled for privacy or storage optimization reasons.
    /// </value>
    /// <remarks>
    /// Response storage enables quality analysis, content auditing, and customer support.
    /// For sensitive applications, responses may be truncated, hashed, or omitted entirely
    /// while preserving metadata for analytics purposes.
    /// </remarks>
    public string? Response { get; set; }
    
    /// <summary>
    /// Time taken for the AI request in milliseconds
    /// </summary>
    public int? ResponseTimeMs { get; set; }
    
    /// <summary>
    /// Tokens used in the request (if available)
    /// </summary>
    public int? TokensUsed { get; set; }
    
    /// <summary>
    /// Cost of the request (if available)
    /// </summary>
    public decimal? Cost { get; set; }
    
    /// <summary>
    /// When this execution was performed
    /// </summary>
    public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;
    
    /// <summary>
    /// Execution status
    /// </summary>
    public ExecutionStatus Status { get; set; } = ExecutionStatus.Success;
    
    /// <summary>
    /// Error message if execution failed
    /// </summary>
    public string? ErrorMessage { get; set; }
    
    /// <summary>
    /// Quality score for this execution (0.0 - 1.0)
    /// </summary>
    public decimal? QualityScore { get; set; }
    
    /// <summary>
    /// User or system that initiated this execution
    /// </summary>
    [StringLength(100)]
    public string? ExecutedBy { get; set; }
    
    /// <summary>
    /// Execution context (web, api, batch, test, etc.)
    /// </summary>
    [StringLength(50)]
    public string? ExecutionContext { get; set; }
    
    /// <summary>
    /// Variable collection used for this execution (if applicable)
    /// </summary>
    public Guid? VariableCollectionId { get; set; }
    
    // Navigation properties
    public virtual PromptTemplate PromptTemplate { get; set; } = null!;
    public virtual VariableCollection? VariableCollection { get; set; }
}
