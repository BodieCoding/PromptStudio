
namespace PromptStudio.Core.DTOs.Analytics;

/// <summary>
/// Token consumption analytics with cost calculation for AI model usage tracking and billing services.
/// 
/// <para><strong>Service Integration:</strong></para>
/// Used by billing services, cost tracking systems, and analytics platforms to monitor and calculate
/// AI model resource consumption. Enables accurate cost allocation, usage analytics, and budget management
/// across different organizational units, projects, and user activities.
/// 
/// <para><strong>Data Contract:</strong></para>
/// Provides detailed token consumption breakdown with input/output categorization and associated
/// cost calculations. Supports both current usage tracking and historical analysis for cost optimization
/// and resource planning across different AI model providers and pricing structures.
/// </summary>
/// <remarks>
/// <para><strong>Service Layer Usage:</strong></para>
/// - Billing services use this for accurate cost calculation and invoice generation
/// - Analytics services aggregate this data for usage trend analysis and forecasting
/// - Budget management services track consumption against allocated budgets
/// - Optimization services analyze token efficiency and cost optimization opportunities
/// - Reporting services generate usage summaries and cost allocation reports
/// 
/// <para><strong>Cost Calculation:</strong></para>
/// TotalCost is computed from token counts and pricing rates
/// Null pricing values indicate unavailable cost data for that token type
/// Service layers should handle null costs gracefully for mixed pricing scenarios
/// 
/// <para><strong>Provider Integration:</strong></para>
/// Token counts reflect actual consumption reported by AI model providers
/// Cost rates should be updated to reflect current provider pricing
/// Different providers may have different pricing structures requiring adaptation
/// </remarks>
/// <example>
/// <code>
/// // Service layer usage for cost tracking
/// var usage = new TokenUsage {
///     InputTokens = 1500,
///     OutputTokens = 800,
///     InputTokenCost = 0.001m,
///     OutputTokenCost = 0.002m
/// };
/// await billingService.RecordUsageAsync(usage, organizationId, projectId);
/// var totalCost = usage.TotalCost; // Calculated: (1500 * 0.001) + (800 * 0.002) = $3.10
/// </code>
/// </example>
public class TokenUsage
{
    /// <summary>
    /// Number of input tokens consumed during AI model processing.
    /// Represents tokens in the prompt, context, and system messages sent to the model.
    /// Service layers use this for input cost calculation and usage optimization analysis.
    /// </summary>
    public int InputTokens { get; set; }

    /// <summary>
    /// Number of output tokens generated by the AI model during processing.
    /// Represents tokens in the model's response and generated content.
    /// Used by billing services for output cost calculation and content volume analysis.
    /// </summary>
    public int OutputTokens { get; set; }

    /// <summary>
    /// Calculated total token consumption combining input and output tokens.
    /// Computed as InputTokens + OutputTokens for comprehensive usage tracking.
    /// Service layers use this for total consumption analysis and resource planning.
    /// </summary>
    public int TotalTokens => InputTokens + OutputTokens;

    /// <summary>
    /// Cost per input token in decimal currency units for precise billing calculations.
    /// Null when input token pricing is unavailable or not applicable.
    /// Billing services use this with InputTokens for accurate input cost calculation.
    /// </summary>
    public decimal? InputTokenCost { get; set; }

    /// <summary>
    /// Cost per output token in decimal currency units for precise billing calculations.
    /// Null when output token pricing is unavailable or not applicable.
    /// Billing services use this with OutputTokens for accurate output cost calculation.
    /// </summary>
    public decimal? OutputTokenCost { get; set; }

    /// <summary>
    /// Calculated total cost for this token usage combining input and output costs.
    /// Computed as (InputTokens × InputTokenCost) + (OutputTokens × OutputTokenCost).
    /// Null cost rates are treated as zero for calculation purposes.
    /// </summary>
    public decimal? TotalCost => (InputTokens * (InputTokenCost ?? 0)) + (OutputTokens * (OutputTokenCost ?? 0));
}