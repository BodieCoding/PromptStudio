namespace PromptStudio.Core.DTOs.Flow;

/// <summary>
/// Represents the detailed execution result of a single node within a flow, including timing, costs, and data transformations.
/// </summary>
/// <remarks>
/// <para><strong>Service Integration:</strong></para>
/// <para>Detailed node-level result DTO used by flow execution engines, monitoring services, and debugging tools.
/// Essential for node-level performance analysis, cost tracking, and execution troubleshooting in complex workflows.</para>
/// 
/// <para><strong>Data Contract:</strong></para>
/// <para>Comprehensive node execution data with input/output tracking, timing metrics, and resource consumption.
/// Designed for detailed execution audit trails and performance optimization analysis.</para>
/// 
/// <para><strong>Usage Patterns:</strong></para>
/// <list type="bullet">
/// <item>Node-level execution monitoring and debugging</item>
/// <item>Performance bottleneck identification and optimization</item>
/// <item>Cost allocation and resource usage tracking</item>
/// <item>Execution audit trails and compliance reporting</item>
/// </list>
/// 
/// <para><strong>Performance Notes:</strong></para>
/// <para>Contains input/output dictionaries that may grow large for data-intensive nodes.
/// Consider truncating or summarizing large data objects for monitoring scenarios. Token usage and cost tracking
/// add minimal overhead but provide valuable insights for optimization.</para>
/// </remarks>
public class NodeExecutionResult
{
    /// <summary>
    /// Gets or sets the unique identifier for this node execution instance.
    /// </summary>
    /// <value>A GUID that uniquely identifies this specific node execution.</value>
    public Guid ExecutionId { get; set; }

    /// <summary>
    /// Gets or sets the identifier of the node that was executed.
    /// </summary>
    /// <value>A GUID identifying the node definition within the flow.</value>
    public Guid NodeId { get; set; }

    /// <summary>
    /// Gets or sets the human-readable name of the executed node.
    /// </summary>
    /// <value>A string providing a descriptive name for the node.</value>
    public string NodeName { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the type classification of the executed node.
    /// </summary>
    /// <value>A string identifying the node type (e.g., "prompt", "condition", "transform").</value>
    public string NodeType { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets a value indicating whether the node execution completed successfully.
    /// </summary>
    /// <value>True if the node executed without errors; otherwise, false.</value>
    public bool Success { get; set; }

    /// <summary>
    /// Gets or sets the error message if the node execution failed.
    /// </summary>
    /// <value>A descriptive error message explaining the failure, or null if execution was successful.</value>
    public string? Error { get; set; }

    /// <summary>
    /// Gets or sets the timestamp when the node execution started.
    /// </summary>
    /// <value>A DateTime representing the execution start time in UTC.</value>
    public DateTime StartedAt { get; set; }

    /// <summary>
    /// Gets or sets the timestamp when the node execution completed.
    /// </summary>
    /// <value>A DateTime representing the execution completion time in UTC, or null if still executing.</value>
    public DateTime? CompletedAt { get; set; }

    /// <summary>
    /// Gets the calculated duration of the node execution.
    /// </summary>
    /// <value>A TimeSpan representing the execution duration, or null if not yet completed.</value>
    public TimeSpan? Duration => CompletedAt?.Subtract(StartedAt);

    /// <summary>
    /// Gets or sets the input data provided to the node for execution.
    /// </summary>
    /// <value>A dictionary containing the input parameters and data passed to the node.</value>
    public Dictionary<string, object> InputData { get; set; } = new();

    /// <summary>
    /// Gets or sets the output data produced by the node execution.
    /// </summary>
    /// <value>A dictionary containing the results and data generated by the node.</value>
    public Dictionary<string, object> OutputData { get; set; } = new();

    /// <summary>
    /// Gets or sets the current execution status of the node.
    /// </summary>
    /// <value>A NodeExecutionStatus value indicating the current state of execution.</value>
    public NodeExecutionStatus Status { get; set; }

    /// <summary>
    /// Gets or sets the token usage metrics for this node execution.
    /// </summary>
    /// <value>A TokenUsage object containing token consumption details, or null if not applicable.</value>
    public TokenUsage? TokenUsage { get; set; }

    /// <summary>
    /// Gets or sets the monetary cost incurred by this node execution.
    /// </summary>
    /// <value>A decimal representing the execution cost, or null if cost tracking is disabled.</value>
    public decimal? Cost { get; set; }
}
