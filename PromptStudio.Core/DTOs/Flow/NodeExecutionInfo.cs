namespace PromptStudio.Core.DTOs.Flow;

/// <summary>
/// Represents concise node execution information for flow-level tracking and lightweight monitoring scenarios.
/// </summary>
/// <remarks>
/// <para><strong>Service Integration:</strong></para>
/// <para>Lightweight node tracking DTO used in flow execution results for simplified monitoring and status reporting.
/// Used by flow orchestrators for basic execution tracking without the overhead of full node execution details.</para>
/// 
/// <para><strong>Data Contract:</strong></para>
/// <para>Simplified node execution data optimized for inclusion in flow-level results and status updates.
/// Designed for efficient serialization in flow execution responses while providing essential tracking information.</para>
/// 
/// <para><strong>Usage Patterns:</strong></para>
/// <list type="bullet">
/// <item>Flow execution status tracking and progress reporting</item>
/// <item>Lightweight execution monitoring and dashboard updates</item>
/// <item>Basic execution audit trails and logging</item>
/// <item>Flow-level performance summary and timing analysis</item>
/// </list>
/// 
/// <para><strong>Performance Notes:</strong></para>
/// <para>Optimized for inclusion in collections within flow execution results. Input/output objects should be kept minimal
/// to prevent payload inflation. Consider summarizing or truncating large data objects for monitoring scenarios.</para>
/// </remarks>
public class NodeExecutionInfo
{
    /// <summary>
    /// Gets or sets the identifier of the node that was executed.
    /// </summary>
    /// <value>A string identifying the specific node within the flow.</value>
    public string NodeId { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the timestamp when the node execution started.
    /// </summary>
    /// <value>A DateTime representing the execution start time in UTC.</value>
    public DateTime StartTime { get; set; }

    /// <summary>
    /// Gets or sets the timestamp when the node execution completed.
    /// </summary>
    /// <value>A DateTime representing the execution completion time in UTC, or null if still executing.</value>
    public DateTime? EndTime { get; set; }

    /// <summary>
    /// Gets or sets the input data provided to the node.
    /// </summary>
    /// <value>The input object passed to the node, or null if no input was provided.</value>
    public object? Input { get; set; }

    /// <summary>
    /// Gets or sets the output data produced by the node.
    /// </summary>
    /// <value>The output object generated by the node, or null if no output was produced or execution failed.</value>
    public object? Output { get; set; }

    /// <summary>
    /// Gets or sets the current execution status of the node.
    /// </summary>
    /// <value>A string indicating the execution state (e.g., "pending", "running", "completed", "failed").</value>
    public string Status { get; set; } = "pending";

    /// <summary>
    /// Gets or sets the error message if the node execution failed.
    /// </summary>
    /// <value>A descriptive error message explaining the failure, or null if execution was successful.</value>
    public string? Error { get; set; }

    /// <summary>
    /// Gets the calculated duration of the node execution in milliseconds.
    /// </summary>
    /// <value>A positive integer representing the execution time, or 0 if not yet completed.</value>
    public long Duration => EndTime.HasValue ? (long)(EndTime.Value - StartTime).TotalMilliseconds : 0;
}
