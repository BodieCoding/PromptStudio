namespace PromptStudio.Core.DTOs.Execution;

/// <summary>
/// Represents the result of executing a prompt template or prompt-related operation.
/// Provides comprehensive execution metadata including success status, timing, and error handling.
/// </summary>
/// <remarks>
/// <para><strong>Execution Pattern:</strong></para>
/// <para>Standard result container for all prompt execution operations across the PromptStudio platform.
/// Encapsulates both successful outcomes and error scenarios with detailed diagnostic information
/// for debugging, monitoring, and user feedback purposes.</para>
/// 
/// <para><strong>Usage Scenarios:</strong></para>
/// <list type="bullet">
/// <item><description>Single prompt template execution with variable substitution</description></item>
/// <item><description>Batch execution operations with individual result tracking</description></item>
/// <item><description>API endpoint responses for execution requests</description></item>
/// <item><description>Service layer operation results with comprehensive metadata</description></item>
/// </list>
/// 
/// <para><strong>Error Handling:</strong></para>
/// <para>Implements a Result pattern that avoids exception throwing for business logic errors.
/// Separates system errors (exceptions) from business validation errors for better error handling
/// and user experience design.</para>
/// </remarks>
public class ExecutionResult
{
    /// <summary>
    /// Gets or sets a value indicating whether the execution operation completed successfully.
    /// </summary>
    /// <value>
    /// True if the operation completed without errors; false if errors occurred.
    /// </value>
    public bool IsSuccess { get; set; }

    /// <summary>
    /// Gets or sets the output content generated by the prompt execution.
    /// Contains the final processed result after variable substitution and template rendering.
    /// </summary>
    /// <value>
    /// The generated output content, or null if execution failed or produced no output.
    /// </value>
    public string? Output { get; set; }

    /// <summary>
    /// Gets or sets the collection of error messages encountered during execution.
    /// Provides detailed error information for debugging and user feedback.
    /// </summary>
    /// <value>
    /// A list of error messages. Empty list indicates no errors occurred.
    /// </value>
    public List<string> Errors { get; set; } = new();

    /// <summary>
    /// Gets or sets the collection of warning messages generated during execution.
    /// Indicates non-critical issues that didn't prevent successful completion.
    /// </summary>
    /// <value>
    /// A list of warning messages. Empty list indicates no warnings were generated.
    /// </value>
    public List<string> Warnings { get; set; } = new();

    /// <summary>
    /// Gets or sets the unique identifier for this execution instance.
    /// Enables tracking and correlation of execution results across operations.
    /// </summary>
    /// <value>
    /// A unique identifier for this execution, or null if not assigned.
    /// </value>
    public Guid? ExecutionId { get; set; }

    /// <summary>
    /// Gets or sets the timestamp when the execution operation started.
    /// Provides timing information for performance monitoring and auditing.
    /// </summary>
    /// <value>
    /// The UTC timestamp when execution began, or null if not tracked.
    /// </value>
    public DateTime? StartTime { get; set; }

    /// <summary>
    /// Gets or sets the timestamp when the execution operation completed.
    /// Combined with StartTime, enables duration calculation for performance analysis.
    /// </summary>
    /// <value>
    /// The UTC timestamp when execution finished, or null if not tracked or still running.
    /// </value>
    public DateTime? EndTime { get; set; }

    /// <summary>
    /// Gets the duration of the execution operation.
    /// Calculated property providing the time span between start and end times.
    /// </summary>
    /// <value>
    /// The execution duration, or null if timing information is incomplete.
    /// </value>
    public TimeSpan? Duration => StartTime.HasValue && EndTime.HasValue 
        ? EndTime.Value - StartTime.Value 
        : null;

    /// <summary>
    /// Gets or sets additional metadata associated with the execution.
    /// Provides extensible storage for execution-specific information.
    /// </summary>
    /// <value>
    /// A dictionary containing execution metadata such as token counts, model information, or custom properties.
    /// </value>
    public Dictionary<string, object> Metadata { get; set; } = new();

    /// <summary>
    /// Gets or sets the identifier of the prompt template that was executed.
    /// Links the execution result back to the source template for tracking purposes.
    /// </summary>
    /// <value>
    /// The unique identifier of the executed prompt template, or null if not applicable.
    /// </value>
    public int? PromptTemplateId { get; set; }

    /// <summary>
    /// Gets or sets the variables that were used during execution.
    /// Provides context for the execution environment and enables reproducibility.
    /// </summary>
    /// <value>
    /// A dictionary of variable names and their values used during execution.
    /// </value>
    public Dictionary<string, string> Variables { get; set; } = new();

    /// <summary>
    /// Gets a value indicating whether the execution encountered any errors.
    /// Convenience property for quick error checking.
    /// </summary>
    /// <value>
    /// True if the Errors collection contains one or more error messages; false otherwise.
    /// </value>
    public bool HasErrors => Errors.Any();

    /// <summary>
    /// Gets a value indicating whether the execution generated any warnings.
    /// Convenience property for quick warning detection.
    /// </summary>
    /// <value>
    /// True if the Warnings collection contains one or more warning messages; false otherwise.
    /// </value>
    public bool HasWarnings => Warnings.Any();

    /// <summary>
    /// Gets a value indicating whether the execution produced any output content.
    /// Convenience property for checking result availability.
    /// </summary>
    /// <value>
    /// True if Output contains non-null, non-empty content; false otherwise.
    /// </value>
    public bool HasOutput => !string.IsNullOrEmpty(Output);

    /// <summary>
    /// Initializes a new instance of the ExecutionResult class with default values.
    /// Creates a result instance ready for population by execution services.
    /// </summary>
    public ExecutionResult()
    {
    }

    /// <summary>
    /// Initializes a new instance of the ExecutionResult class with success status and output.
    /// Creates a successful execution result with the specified output content.
    /// </summary>
    /// <param name="output">The output content generated by the execution</param>
    /// <param name="executionId">Optional unique identifier for this execution</param>
    public ExecutionResult(string output, Guid? executionId = null)
    {
        IsSuccess = true;
        Output = output;
        ExecutionId = executionId ?? Guid.NewGuid();
    }

    /// <summary>
    /// Creates a successful ExecutionResult with the specified output content.
    /// Factory method for creating successful execution results.
    /// </summary>
    /// <param name="output">The output content generated by the execution</param>
    /// <param name="executionId">Optional unique identifier for this execution</param>
    /// <returns>A new ExecutionResult instance marked as successful</returns>
    public static ExecutionResult Success(string output, Guid? executionId = null)
    {
        return new ExecutionResult(output, executionId);
    }

    /// <summary>
    /// Creates a failed ExecutionResult with the specified error message.
    /// Factory method for creating error execution results.
    /// </summary>
    /// <param name="error">The error message describing the failure</param>
    /// <param name="executionId">Optional unique identifier for this execution</param>
    /// <returns>A new ExecutionResult instance marked as failed</returns>
    public static ExecutionResult Failure(string error, Guid? executionId = null)
    {
        return new ExecutionResult
        {
            IsSuccess = false,
            ExecutionId = executionId ?? Guid.NewGuid(),
            Errors = new List<string> { error }
        };
    }

    /// <summary>
    /// Creates a failed ExecutionResult with multiple error messages.
    /// Factory method for creating error execution results with multiple errors.
    /// </summary>
    /// <param name="errors">The collection of error messages describing the failures</param>
    /// <param name="executionId">Optional unique identifier for this execution</param>
    /// <returns>A new ExecutionResult instance marked as failed</returns>
    public static ExecutionResult Failure(IEnumerable<string> errors, Guid? executionId = null)
    {
        return new ExecutionResult
        {
            IsSuccess = false,
            ExecutionId = executionId ?? Guid.NewGuid(),
            Errors = errors.ToList()
        };
    }

    /// <summary>
    /// Adds an error message to the execution result and marks it as failed.
    /// Provides fluent API for accumulating errors during execution.
    /// </summary>
    /// <param name="error">The error message to add</param>
    /// <returns>This ExecutionResult instance for method chaining</returns>
    public ExecutionResult AddError(string error)
    {
        Errors.Add(error);
        IsSuccess = false;
        return this;
    }

    /// <summary>
    /// Adds a warning message to the execution result.
    /// Warnings don't affect the success status of the execution.
    /// </summary>
    /// <param name="warning">The warning message to add</param>
    /// <returns>This ExecutionResult instance for method chaining</returns>
    public ExecutionResult AddWarning(string warning)
    {
        Warnings.Add(warning);
        return this;
    }

    /// <summary>
    /// Adds metadata to the execution result.
    /// Provides fluent API for accumulating execution metadata.
    /// </summary>
    /// <param name="key">The metadata key</param>
    /// <param name="value">The metadata value</param>
    /// <returns>This ExecutionResult instance for method chaining</returns>
    public ExecutionResult AddMetadata(string key, object value)
    {
        Metadata[key] = value;
        return this;
    }

    /// <summary>
    /// Marks the execution as started with the current timestamp.
    /// Begins timing tracking for performance monitoring.
    /// </summary>
    /// <returns>This ExecutionResult instance for method chaining</returns>
    public ExecutionResult MarkStarted()
    {
        StartTime = DateTime.UtcNow;
        ExecutionId ??= Guid.NewGuid();
        return this;
    }

    /// <summary>
    /// Marks the execution as completed with the current timestamp.
    /// Completes timing tracking for performance monitoring.
    /// </summary>
    /// <returns>This ExecutionResult instance for method chaining</returns>
    public ExecutionResult MarkCompleted()
    {
        EndTime = DateTime.UtcNow;
        return this;
    }

    /// <summary>
    /// Returns a string representation of the execution result for debugging and logging.
    /// Provides essential execution information in a readable format.
    /// </summary>
    /// <returns>String representation including success status, timing, and error summary</returns>
    public override string ToString()
    {
        var status = IsSuccess ? "Success" : "Failed";
        var duration = Duration?.TotalMilliseconds.ToString("F2") ?? "Unknown";
        var errorCount = HasErrors ? $" ({Errors.Count} errors)" : "";
        var warningCount = HasWarnings ? $" ({Warnings.Count} warnings)" : "";
        
        return $"ExecutionResult: {status} in {duration}ms{errorCount}{warningCount}";
    }
}
